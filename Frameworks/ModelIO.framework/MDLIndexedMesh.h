/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/ModelIO.framework/ModelIO
 */

@interface MDLIndexedMesh : MDLObject {
    <MDLMeshBufferAllocator> * _allocator;
    <MDLAssetResolver> * _resolver;
    MDLSubmeshTopology * _topology;
    struct ParsedUsdMesh { bool x1; bool x2; struct VtArray<GfVec3f> { struct intrusive_ptr<VtArray<GfVec3f>::_Data> { struct _Data {} *x_1_2_1; } x_3_1_1; } x3; struct vector<mdlio_usd::UsdAttr, std::__1::allocator<mdlio_usd::UsdAttr> > { struct UsdAttr {} *x_4_1_1; struct UsdAttr {} *x_4_1_2; struct __compressed_pair<mdlio_usd::UsdAttr *, std::__1::allocator<mdlio_usd::UsdAttr> > { struct UsdAttr {} *x_3_2_1; } x_4_1_3; } x4; struct mesh_topology { struct VtArray<int> { struct intrusive_ptr<VtArray<int>::_Data> { struct _Data {} *x_1_3_1; } x_1_2_1; } x_5_1_1; struct VtArray<int> { struct intrusive_ptr<VtArray<int>::_Data> { struct _Data {} *x_1_3_1; } x_2_2_1; } x_5_1_2; struct VtArray<int> { struct intrusive_ptr<VtArray<int>::_Data> { struct _Data {} *x_1_3_1; } x_3_2_1; } x_5_1_3; struct VtArray<float> { struct intrusive_ptr<VtArray<float>::_Data> { struct _Data {} *x_1_3_1; } x_4_2_1; } x_5_1_4; struct VtArray<int> { struct intrusive_ptr<VtArray<int>::_Data> { struct _Data {} *x_1_3_1; } x_5_2_1; } x_5_1_5; struct VtArray<int> { struct intrusive_ptr<VtArray<int>::_Data> { struct _Data {} *x_1_3_1; } x_6_2_1; } x_5_1_6; struct VtArray<float> { struct intrusive_ptr<VtArray<float>::_Data> { struct _Data {} *x_1_3_1; } x_7_2_1; } x_5_1_7; } x5; } * _usd_mesh;
}

@property (readonly) <MDLMeshBufferAllocator> *allocator;
@property (readonly) NSArray *attributeNames;
@property bool doubleSided;
@property MDLMaterial *material;
@property (readonly) <MDLAssetResolver> *resolver;
@property (readonly) MDLSubmeshTopology *topology;

- (void).cxx_destruct;
- (id)allocator;
- (id)attributeNames;
- (void)dealloc;
- (bool)doubleSided;
- (id)floatDataForAttributeNamed:(id)arg1;
- (id)indicesForAttributeNamed:(id)arg1;
- (id)initWithName:(id)arg1 bufferAllocator:(id)arg2 resolver:(id)arg3;
- (id)material;
- (void)parse_prim:(const struct UsdPrim { int x1; struct Usd_PrimDataHandle { struct intrusive_ptr<const Usd_PrimData> { struct Usd_PrimData {} *x_1_2_1; } x_2_1_1; } x2; struct TfToken { struct TfPointerAndBits<const TfToken::_Rep> { struct _Rep {} *x_1_2_1; } x_3_1_1; } x3; }*)arg1 frame:(struct UsdTimeCode { double x1; })arg2;
- (id)resolver;
- (void)setDoubleSided:(bool)arg1;
- (void)setFaceCount:(id)arg1;
- (void)setFloatDataForAttributeNamed:(id)arg1 data:(id)arg2;
- (void)setIndicesForAttributeNamed:(id)arg1 data:(id)arg2;
- (void)setMaterial:(id)arg1;
- (id)topology;

@end
