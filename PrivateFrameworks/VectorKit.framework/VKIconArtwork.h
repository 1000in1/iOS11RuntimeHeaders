/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
 */

@interface VKIconArtwork : NSObject {
    NSMutableArray * _completionHandlers;
    double  _contentScale;
    struct ExtraStyle { 
        float _scale; 
        float _contentScale; 
        float _tailLength; 
        float _tailBrainChord; 
        float _tailDirection; 
        struct Matrix<float, 2, 1> { 
            float _e[2]; 
        } _glyphImageSize; 
        struct Matrix<float, 2, 1> { 
            float _e[2]; 
        } _landmarkImageSize; 
        struct Matrix<float, 2, 1> { 
            float _e[2]; 
        } _outlineImageSize; 
        struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { 
            struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { 
                struct __rep { 
                    union { 
                        struct __long { 
                            char *__data_; 
                            unsigned long long __size_; 
                            unsigned long long __cap_; 
                        } __l; 
                        struct __short { 
                            BOOL __data_[23]; 
                            struct { 
                                unsigned char __size_; 
                            } ; 
                        } __s; 
                        struct __raw { 
                            unsigned long long __words[3]; 
                        } __r; 
                    } ; 
                } __first_; 
            } __r_; 
        } _text; 
    }  _extraStyle;
    struct CGColor { } * _fullBleedColor;
    struct atomic<bool> { 
        bool __a_; 
    }  _hasIcon;
    VKImage * _image;
    struct Style { 
        struct optional<gss::IconStyle> { 
            bool _hasValue; 
            union ValueUnion { 
                unsigned char data[1]; 
                unsigned char type; 
            } _value; 
        } _iconStyle; 
        float _scale; 
        float _contentScale; 
        float _fillWeight; 
        float _strokeWeight; 
        float _shadowWeight; 
        float _cornerRadius; 
        struct Matrix<float, 2, 1> { 
            float _e[2]; 
        } _glyphMargin; 
        struct Matrix<float, 2, 1> { 
            float _e[2]; 
        } _shadowOffset; 
        struct FixedPointVector<unsigned char, 4> { 
            unsigned char _e[4]; 
        } _fillColor; 
        struct FixedPointVector<unsigned char, 4> { 
            unsigned char _e[4]; 
        } _strokeColor; 
        struct FixedPointVector<unsigned char, 4> { 
            unsigned char _e[4]; 
        } _shadowColor; 
        struct FixedPointVector<unsigned char, 4> { 
            unsigned char _e[4]; 
        } _glyphColor; 
        struct FixedPointVector<unsigned char, 4> { 
            unsigned char _e[4]; 
        } _gradientTop; 
        struct FixedPointVector<unsigned char, 4> { 
            unsigned char _e[4]; 
        } _gradientBottom; 
        unsigned char _glyphBlendMode; 
        unsigned char _glyphStyle; 
        struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { 
            struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { 
                struct __rep { 
                    union { 
                        struct __long { 
                            char *__data_; 
                            unsigned long long __size_; 
                            unsigned long long __cap_; 
                        } __l; 
                        struct __short { 
                            BOOL __data_[23]; 
                            struct { 
                                unsigned char __size_; 
                            } ; 
                        } __s; 
                        struct __raw { 
                            unsigned long long __words[3]; 
                        } __r; 
                    } ; 
                } __first_; 
            } __r_; 
        } _shieldID; 
    }  _style;
    struct CGPoint { 
        double x; 
        double y; 
    }  _textCenterPosition;
}

@property (nonatomic, readonly) double contentScale;
@property (nonatomic) struct CGColor { }*fullBleedColor;

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)_cleanUpAfterDrawing;
- (id)_newImage;
- (id)_newImageWithText:(id)arg1 fontName:(id)arg2;
- (double)contentScale;
- (void)dealloc;
- (struct CGColor { }*)fullBleedColor;
- (void)getImage:(id /* block */)arg1 queue:(id)arg2;
- (id)image;
- (id)imageWithText:(id)arg1 fontName:(id)arg2;
- (id)initWithImage:(struct CGImage { }*)arg1 contentScale:(double)arg2;
- (void)setFullBleedColor:(struct CGColor { }*)arg1;

@end
